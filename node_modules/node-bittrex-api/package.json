{
  "_from": "node-bittrex-api",
  "_id": "node-bittrex-api@0.8.1",
  "_inBundle": false,
  "_integrity": "sha1-Scad6IHphe9jraqV7JFIMm1FqZg=",
  "_location": "/node-bittrex-api",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "node-bittrex-api",
    "fetchSpec": "latest",
    "name": "node-bittrex-api",
    "raw": "node-bittrex-api",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/node-bittrex-api/-/node-bittrex-api-0.8.1.tgz",
  "_shasum": "49c69de881e985ef63adaa95ec9148326d45a998",
  "_shrinkwrap": null,
  "_spec": "node-bittrex-api",
  "_where": "/home/zbarr/coin_arb",
  "author": {
    "name": "David Parlevliet",
    "url": " https://github.com/dparlevliet "
  },
  "bugs": {
    "email": "david.parlevliet.github@gmail.com",
    "url": "https://github.com/dparlevliet/node.bittrex.api/issues"
  },
  "bundleDependencies": false,
  "contributors": [],
  "dependencies": {
    "cloudscraper": "^1.4.1",
    "jsonic": "^0.3.0",
    "object-assign": "^4.1.1",
    "request": ">= 2.35.0",
    "signalr-client": "0.0.17"
  },
  "deprecated": false,
  "description": "Node Bittrex API - asynchronous node.js library for the Bittrex API https://bittrex.com/",
  "devDependencies": {
    "mocha": "^3.3.0"
  },
  "engines": {
    "node": ">=0.10"
  },
  "homepage": "https://github.com/dparlevliet/node.bittrex.api",
  "keywords": [
    "altcoin",
    "bitcoin",
    "bittrex",
    "btc",
    "xbt"
  ],
  "license": "MIT",
  "main": "node.bittrex.api.js",
  "name": "node-bittrex-api",
  "optionalDependencies": {},
  "readme": "!Important! Note\n----\n\nThis is a maintained fork of the original package. **The npm package name has\nchanged** because we could not get access to the npmjs repository to keep it\nupdated. Please see the [Quick start](https://github.com/dparlevliet/node.bittrex.api#quick-start) section for the new package name and\ninstructions.\n\nAlso, the **websocket code has changed** after Bittrex switched to using Cloudflare\nso please see the new ``Websockets`` documentation and updated unit tests and\nexamples in the ``examples/`` folder.\n\n\nNode Bittrex API\n=========\n\nNode Bittrex API is an asynchronous node.js library for the Bittrex API - https://bittrex.com/.\nThe Bittrex API data can be received either as a GET request or via Websockets API.\n\nDocumentation for the Bittrex API: https://bittrex.com/Home/Api\n\nThis Library is licensed under the [MIT license](https://github.com/dparlevliet/node.bittrex.api/blob/master/LICENSE).\n\n\nContributors\n----\nThanks go to the people who have contributed code to this Library.\n\n* [n0mad01](https://github.com/n0mad01) Special kudos - the original creator of the library. Thanks for the hard work.\n* [cyberwlf](https://github.com/armandohg) & [armandohg](https://github.com/armandohg) - Special thanks to them for the cloudflare websocket research and fix but also thanks to everyone else in [issue #67](https://github.com/n0mad01/node.bittrex.api/issues/67)\n* [samuelhei](https://github.com/samuelhei) Special kudos - thanks to him all missing calls are complemented as also structural improvements have been made.\n* [mhuggins](https://github.com/mhuggins)\n* [192-sean](https://github.com/192-sean)\n* [caffeinewriter](https://github.com/caffeinewriter)\n* [apense](https://github.com/apense)\n* [TheRealest](https://github.com/TheRealest)\n* [Alexsey](https://github.com/Alexsey)\n\n\nBefore you start\n----\nThis is just a quick reminder that you are handling coins with this library (and thus real money), so, understand the situation as much as possible and make everything to prevent losing them.\n\nHere is a small checklist you should go through before you start:\n\n- Make sure you don't give your api key more rights as absolutely necessary - for first testing READ INFO alone should be enough! (bittrex.com under: Settings/API Keys)\n\n![bittrex_ap_keys_control](https://user-images.githubusercontent.com/260321/29748739-a6c2c00e-8b1c-11e7-95ec-1b0221348235.png)\n\n- make sure to understand the API Key permissions\n    1. READ INFO - Allows you to read private details such as open orders, order history, balances, etc\n    2. TRADE LIMIT - Allows you to create/cancel trade limit buy/sell orders\n    3. TRADE MARKET - allows you to create/cancel market buy/sell orders\n    4. WITHDRAW - Allows you to withdraw to another address\n- Make use of the Bittrex IP Whitelist as also the Withdrawal Whitelist features\n- Do not ever commit your API Keys to GitHub or expose them under any circumstances!\n\n\nQuick start\n----\n```sh\n$ npm install node-bittrex-api\n```\n\n```javascript\nvar bittrex = require('node-bittrex-api');\nbittrex.options({\n  'apikey' : API_KEY,\n  'apisecret' : API_SECRET,\n});\nbittrex.getmarketsummaries( function( data, err ) {\n  if (err) {\n    return console.error(err);\n  }\n  for( var i in data.result ) {\n    bittrex.getticker( { market : data.result[i].MarketName }, function( ticker ) {\n      console.log( ticker );\n    });\n  }\n});\n```\n\n\nAdvanced start\n----\n\nfetch the project via git:\n```sh\n$ git clone https://github.com/dparlevliet/node.bittrex.api.git\n```\n\nthen meet the package dependencies:\n```sh\n$ cd node.bittrex.api/\n$ npm install\n```\n\nInclude ``node.bittrex.api.js`` into your project:\n```javascript\nvar bittrex = require('./node.bittrex.api.js');\n```\n\n##### Configuration\n```javascript\nbittrex.options({\n  'apikey' : API_KEY,\n  'apisecret' : API_SECRET,\n  'verbose' : true,\n  'cleartext' : false\n});\n```\n\nBy default the returned data is an object, in order to get clear text you have to add the option **cleartext** (streams will always return text):\n```javascript\n'cleartext' : true\n```\n\nThe baseUrl itself can also be set via options\n```javascript\n'baseUrl' : 'https://bittrex.com/api/v1',\n'baseUrlv2' : 'https://bittrex.com/Api/v2.0',\n```\n\nChange the callbacks arguments sequence\n```javascript\n'inverse_callback_arguments' : true,\n```\nThis simply changes the sequence in which the arguments are passed, instead of e.g.:\n```javascript\ngetmarkethistory({market : 'USDT-BTC'}, function(data, error) {});\n```\nyou'll get the reversed order:\n```javascript\ngetmarkethistory({market : 'USDT-BTC'}, function(error, data) {});\n```\n\n\nWebsockets\n--\n\n#### Basic example\n```javascript\nbittrex.websockets.client(function() {\n  console.log('Websocket connected');\n  bittrex.websockets.subscribe(['BTC-ETH'], function(data) {\n    if (data.M === 'updateExchangeState') {\n      data.A.forEach(function(data_for) {\n        console.log('Market Update for '+ data_for.MarketName, data_for);\n      });\n    }\n  });\n});\n```\n\n#### Basic example with event emitters\n```javascript\nbittrex.options({\n  websockets: {\n    onConnect: function() {\n      console.log('Websocket connected');\n      bittrex.websockets.subscribe(['BTC-ETH'], function(data) {\n        if (data.M === 'updateExchangeState') {\n          data.A.forEach(function(data_for) {\n            console.log('Market Update for '+ data_for.MarketName, data_for);\n          });\n        }\n      });\n    },\n    onDisconnect: function() {\n      console.log('Websocket disconnected');\n    }\n  }\n});\n\nvar websocketClient;\nbittrex.websockets.client(function(client) {\n  websocketClient = client;\n});\n```\n\n\n#### Available methods\nAll of these methods will build a websocket client and attempt a connection if\nyou have not run ``websockets.client`` yourself. See ``examples/`` for a better\nunderstanding.\n\n\n#### websockets.listen\nThis will subscribe to just the global ticker updates.\n\n```javascript\nbittrex.websockets.listen(function(data, client) {\n  if (data.M === 'updateSummaryState') {\n    data.A.forEach(function(data_for) {\n      data_for.Deltas.forEach(function(marketsDelta) {\n        console.log('Ticker Update for '+ marketsDelta.MarketName, marketsDelta);\n      });\n    });\n  }\n});\n```\n\n\n#### websockets.subscribe\nThis will subscribe to the specified markets data. To build\nyour candle data, order book and market history, etc. you will need to subscribe\nto the individual markets you wish to watch. You can subscribe to all of them.\n\n```javascript\nbittrex.websockets.subscribe(['BTC-ETH','BTC-SC','BTC-ZEN'], function(data, client) {\n  if (data.M === 'updateExchangeState') {\n    data.A.forEach(function(data_for) {\n      console.log('Market Update for '+ data_for.MarketName, data_for);\n    });\n  }\n});\n```\n\n\n#### Websocket serviceHandlers example\nYou can override the libraries logic for the following events. Note, this will\nreplace the libraries logic.\n```javascript\nwebsocketClient.serviceHandlers.reconnecting = function (message) {\n  return true; // set to true stops reconnect/retrying\n}\n\nwebsocketClient.serviceHandlers.messageReceived = function (message) {\n  console.log(message); // the messages received must be parsed as json first e.g. via jsonic(message.utf8Data)\n}\n```\n\nall possible serviceHandlers\n```javascript\nbound: function() { console.log(\"Websocket bound\"); },\nconnectFailed: function(error) { console.log(\"Websocket connectFailed: \", error); },\nconnected: function(connection) { console.log(\"Websocket connected\"); },\ndisconnected: function() { console.log(\"Websocket disconnected\"); },\nonerror: function (error) { console.log(\"Websocket onerror: \", error); },\nmessageReceived: function (message) { console.log(\"Websocket messageReceived: \", message); return false; },\nbindingError: function (error) { console.log(\"Websocket bindingError: \", error); },\nconnectionLost: function (error) { console.log(\"Connection Lost: \", error); },\nreconnecting: function (retry { inital: true/false, count: 0} ) {\n  console.log(\"Websocket Retrying: \", retry);\n  //return retry.count >= 3; // cancel retry true\n  return true;\n}\n```\n\n\nStreams\n--\nStreams have been removed\n\n\n\nExamples\n--\nAfter configuration you can use the object right away:\nexample #1\n```javascript\nbittrex.getmarketsummaries( function( data, err ) {\n  if (err) {\n    return console.error(err);\n  }\n  for( var i in data.result ) {\n    bittrex.getticker( { market : data.result[i].MarketName }, function( ticker ) {\n      console.log( ticker );\n    });\n  }\n});\n```\n\nexample #2\n```javascript\nbittrex.getbalance({ currency : 'BTC' }, function( data, err ) {\n  if (err) {\n    return console.error(err);\n  }\n  console.log( data );\n});\n```\n\n\nLibraries\n--\n\nWebsockets depends on the following npm packages:\n- signalR websockets client https://www.npmjs.com/package/signalrjs\n- jsonic JSON parser https://www.npmjs.com/package/jsonic\n- cloudscraper https://www.npmjs.com/package/cloudscraper\n\n\nOther libraries utilized:\n- request https://www.npmjs.org/package/request\n\nFor HmacSHA512 this package is using a part of Googles Crypto.js (the node crypt package could not provide any appropriate result).\n- http://crypto-js.googlecode.com/svn/tags/3.1.2/build/rollups/hmac-sha512.js\n\n\nError examples\n---\n\nExample of request/domain based errors (not Bittrex API error)\n```javascript\nvar url = 'http://fake.bittrex.com/api/v1.1/public/getticker?market=USDT-BTCXXX';\nbittrex.sendCustomRequest( url, function( data, err ) {\n  if (err) {\n    /**\n      {\n        success: false,\n        message: 'URL request error',\n        error:\n         { Error: getaddrinfo ENOTFOUND fake.bittrex.com fake.bittrex.com:80\n             at errnoException (dns.js:28:10)\n             at GetAddrInfoReqWrap.onlookup [as oncomplete] (dns.js:76:26)\n           code: 'ENOTFOUND',\n           errno: 'ENOTFOUND',\n           syscall: 'getaddrinfo',\n           hostname: 'fake.bittrex.com',\n           host: 'fake.bittrex.com',\n           port: 80 },\n        result: undefined\n      }\n    */\n    return console.error(err);\n  }\n  console.log(data);\n});\n```\n\nExample of request/url based errors (not Bittrex API error)\n```javascript\nvar url = 'http://bittrex.com/api/v1.1/public/getfakeendpoint';\nbittrex.sendCustomRequest( url, function( data, err ) {\n  if (err) {\n    /**\n      {\n        success: false,\n        message: 'URL request error',\n        error: undefined,\n        result: {\n          statusCode: 404,\n          statusMessage: 'Not Found',\n          body: '<!DOCTYPE html>\\r\\n<html > ...'\n        }\n      }\n    */\n    return console.error(err);\n  }\n  console.log(data);\n});\n```\n\nExample of Bittrex API error\n```javascript\nbittrex.getcandles({\n  marketName: 'USDT-BTC',\n  tickInterval: 300\n}, function(data, err) {\n  if (err) {\n    /**\n      {\n        success: false,\n        message: 'INVALID_TICK_INTERVAL',\n        result: null\n      }\n    */\n    return console.error(err);\n  }\n  console.log(data);\n});\n```\n\n\nMethods\n----\n\nOptional parameters may have to be looked up at https://bittrex.com/Home/Api.\n\n> It may happen that some Bittrex API methods are missing, also they could have been forgotten in the documentation. In this case, if this strikes you, feel free to open a issue or send me a pull request.\n\n> Also: the method **sendCustomRequest** enables completely custom requests, regardless the specific API methods.\n\n##### sendCustomRequest\n- url           String\n- callback      Function\n- credentials   Boolean     optional    whether the credentials should be applied to the request/stream or not, default is set to false.\n\nexample #1\n```javascript\nvar url = 'https://bittrex.com/api/v1.1/public/getticker?market=BTC-LTC';\nbittrex.sendCustomRequest( url, function( data, err ) {\n  console.log( data );\n});\n```\n\nexample #2 (credentials applied to request/stream)\n```javascript\nbittrex.sendCustomRequest( 'https://bittrex.com/api/v1.1/account/getbalances?currency=BTC', function( data, err ) {\n  console.log( data );\n}, true );\n\nwill result in (the Header is being set too):\nhttps://bittrex.com/api/v1.1/account/getbalances?currency=BTC&apikey=API_KEY&nonce=4456490600\n```\n\n##### getticker\n```javascript\nbittrex.getticker( { market : 'BTC-LTC' }, function( data, err ) {\n  console.log( data );\n});\n```\n\n##### getbalances\n```javascript\nbittrex.getbalances( function( data, err ) {\n  console.log( data );\n});\n```\n\n##### getmarkethistory\n```javascript\nbittrex.getmarkethistory({ market : 'BTC-LTC' }, function( data, err ) {\n  console.log( data );\n});\n```\n\n##### getmarketsummaries\n```javascript\nbittrex.getmarketsummaries( function( data, err ) {\n  console.log( data );\n});\n```\n\n##### getmarketsummary\n```javascript\nbittrex.getmarketsummary( { market : 'BTC-LTC'}, function( data, err ) {\n  console.log( data );\n});\n```\n\n##### getorderbook\n```javascript\nbittrex.getorderbook({ market : 'BTC-LTC', depth : 10, type : 'both' }, function( data, err ) {\n  console.log( data );\n});\n```\n\n##### getwithdrawalhistory\n```javascript\nbittrex.getwithdrawalhistory({ currency : 'BTC' }, function( data, err ) {\n  console.log( data );\n});\n```\n\n##### getdepositaddress\n```javascript\nbittrex.getdepositaddress({ currency : 'BTC' }, function( data, err ) {\n  console.log( data );\n});\n```\n\n##### getdeposithistory\n```javascript\nbittrex.getdeposithistory({ currency : 'BTC' }, function( data, err ) {\n  console.log( data );\n});\n```\n\n##### getbalance\n```javascript\nbittrex.getbalance({ currency : 'BTC' }, function( data, err ) {\n  console.log( data );\n});\n```\n\n##### withdraw\n```javascript\nbittrex.withdraw({ currency : 'BTC', quantity : '1.5112', address : 'THE_ADDRESS' }, function( data, err ) {\n  console.log( data );\n});\n```\n\n\nSupported v2 API methods\n------\n\nLittle is known about the v2 api at present. We have support for only a few methods\nwith very little documentation. Given that the v2 api is still indevelopment by\nBittrex it is possible these methods will change or become invalid without notice.\n\n##### getcandles\n```javascript\nbittrex.getcandles({\n  marketName: 'USDT-BTC',\n  tickInterval: 'fiveMin', // intervals are keywords\n}, function( data, err ) {\n  console.log( data );\n});\n```\n\n##### tradesell\n```javascript\nbittrex.tradesell({\n  MarketName: 'BTC-ZEC',\n  OrderType: 'LIMIT',\n  Quantity: 1.00000000,\n  Rate: 0.04423432,\n  TimeInEffect: 'IMMEDIATE_OR_CANCEL', // supported options are 'IMMEDIATE_OR_CANCEL', 'GOOD_TIL_CANCELLED', 'FILL_OR_KILL'\n  ConditionType: 'NONE', // supported options are 'NONE', 'GREATER_THAN', 'LESS_THAN'\n  Target: 0, // used in conjunction with ConditionType\n}, function( data, err ) {\n  console.log( data );\n});\n```\n\n##### tradebuy\n```javascript\nbittrex.tradebuy({\n  MarketName: 'BTC-ZEC',\n  OrderType: 'LIMIT',\n  Quantity: 1.00000000,\n  Rate: 0.04423432,\n  TimeInEffect: 'IMMEDIATE_OR_CANCEL', // supported options are 'IMMEDIATE_OR_CANCEL', 'GOOD_TIL_CANCELLED', 'FILL_OR_KILL'\n  ConditionType: 'NONE', // supported options are 'NONE', 'GREATER_THAN', 'LESS_THAN'\n  Target: 0, // used in conjunction with ConditionType\n}, function( data, err ) {\n  console.log( data );\n});\n```\n\n\nTesting\n----\n\nInstalling test gear\n```bash\nnpm install --only=dev\n```\n\nRunning all tests\n```bash\nnpm test tests\n```\n\nor individually\n```bash\nnpm test tests/public.js\nnpm test tests/private.js\n```\n\n##### Testing private methods\n\nTesting private method endpoints requires an api key/secret which should be\ninstalled in to ``tests/config.json`` - you will find an example file in\n``tests/config_example.json``.\n\n```bash\ncp tests/tests_example.json tests/config.json\nvim tests/config.json\n```\n\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/dparlevliet/node.bittrex.api.git"
  },
  "scripts": {
    "test": "mocha"
  },
  "version": "0.8.1"
}
